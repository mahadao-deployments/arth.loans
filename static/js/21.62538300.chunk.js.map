{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","emitDeactivate","Deactivate","EventEmitter","WalletLinkConnector","url","appName","appLogoUrl","darkMode","handleChainChanged","bind","handleAccountsChanged","activate","this","provider","request","method","accounts","account","on","window","ethereum","isCoinbaseWallet","walletLink","then","m","WalletLink","makeWeb3Provider","e","getProvider","getChainId","chainId","getAccount","deactivate","removeListener","close"],"mappings":"oLAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBC,oBAAWC,G,KAIdC,KAAKC,IAAeC,OAAQH,E,IAGzBI,mBAAUC,G,KAIbJ,KAAKC,IAAeI,MAAOD,E,IAGxBE,0B,KAIHN,KAAKC,IAAeM,W,IAhC7B,CAAgDC,e,qhBAAhD,IAUaC,EAAb,Y,QASE,c,MAAcC,QAAKC,YAASC,eAAYC,aAAUhB,sB,OAChD,cAAM,CAAEA,kBAAmBA,KAA3B,MAEKa,IAAMA,EACX,EAAKC,QAAUA,EACf,EAAKC,WAAaA,EAClB,EAAKC,SAAWA,IAAY,EAE5B,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,MAC1B,EAAKC,sBAAwB,EAAKA,sBAAsBD,KAA3B,M,CAC9B,C,EAnBH,G,EAAA,G,sEAAA,2BAqBeE,SArBf,e,MAyBMC,K,oCAWqB,EAAKC,SAASC,QAAQ,CAC3CC,OAAQ,yBADa,eAAjBC,GAGN,IAAMC,EAAUD,EAAS,GAKzB,OAHA,EAAKH,SAASK,GAAG,eAAgB,EAAKV,oBACtC,EAAKK,SAASK,GAAG,kBAAmB,EAAKR,uBAElC,CAAEG,SAAU,EAAKA,SAAUI,QAASA,E,qBArBvCE,OAAOC,WAAiD,IAArCD,OAAOC,SAASC,iBAErC,EAAKR,SAAWM,OAAOC,a,sBACb,EAAKE,W,uBACU,kEAAqBC,MAAK,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,CAAlB,KAA3B,eAAnBC,GACN,EAAKH,WAAa,IAAIG,EAAJ,GAChBpB,QAAS,EAAKA,QACdE,SAAU,EAAKA,UACX,EAAKD,WAAa,CAAEA,WAAY,EAAKA,YAAe,CAAC,IAE3D,EAAKO,SAAW,EAAKS,WAAWI,iBAAiB,EAAKtB,IA3C3C,E,qGAUjB,OAAAuB,GAAA,sBAAAA,EAAA,KA+CeC,YA/Cf,eAgDI,OAAO,QAAP,QAAOhB,KAAKC,SAhDhB,OAAAc,GAAA,sBAAAA,EAAA,KAmDeE,WAnDf,eAoDI,OAAO,QAAP,QAAOjB,KAAKC,SAASiB,QApDzB,OAAAH,GAAA,sBAAAA,EAAA,KAuDeI,WAvDf,e,uBAwD2BnB,KAAKC,SAASC,QAAQ,CAC3CC,OAAQ,yBADa,eAAjBC,GAGN,OAAOA,EAAS,E,GA3DpB,OAAAW,GAAA,sBAAAA,EAAA,KA8DSK,sBACLpB,KAAKC,SAASoB,eAAe,eAAgBrB,KAAKJ,oBAClDI,KAAKC,SAASoB,eAAe,kBAAmBrB,KAAKF,sBACtD,EAjEH,EAmEewB,MAnEf,e,OAoEItB,KAAKC,SAASqB,QAAdtB,KACKZ,iB,iBArET,OAAA2B,GAAA,sBAAAA,EAAA,KAwEUnB,4BAAmBsB,GAIzBlB,KAAKpB,WAAW,CAAEsC,QAASA,GAC5B,EA7EH,EA+EUpB,+BAAsBM,GAI5BJ,KAAKpB,WAAW,CAAEyB,QAASD,EAAS,IACrC,EApFH,GAAyC1B,I","file":"static/js/21.62538300.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\nconst CHAIN_ID = 1\n\ninterface WalletLinkConnectorArguments {\n  url: string\n  appName: string\n  appLogoUrl?: string\n  darkMode?: boolean\n  supportedChainIds?: number[]\n}\n\nexport class WalletLinkConnector extends AbstractConnector {\n  private readonly url: string\n  private readonly appName: string\n  private readonly appLogoUrl?: string\n  private readonly darkMode: boolean\n\n  public walletLink: any\n  private provider: any\n\n  constructor({ url, appName, appLogoUrl, darkMode, supportedChainIds }: WalletLinkConnectorArguments) {\n    super({ supportedChainIds: supportedChainIds })\n\n    this.url = url\n    this.appName = appName\n    this.appLogoUrl = appLogoUrl\n    this.darkMode = darkMode || false\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    // @ts-ignore\n    if (window.ethereum && window.ethereum.isCoinbaseWallet === true) {\n      // user is in the dapp browser on Coinbase Wallet\n      this.provider = window.ethereum\n    } else if (!this.walletLink) {\n      const WalletLink = await import('walletlink').then(m => m?.default ?? m)\n      this.walletLink = new WalletLink({\n        appName: this.appName,\n        darkMode: this.darkMode,\n        ...(this.appLogoUrl ? { appLogoUrl: this.appLogoUrl } : {})\n      })\n      this.provider = this.walletLink.makeWeb3Provider(this.url, CHAIN_ID)\n    }\n\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    const account = accounts[0]\n\n    this.provider.on('chainChanged', this.handleChainChanged)\n    this.provider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.provider, account: account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    const accounts = await this.provider.request({\n      method: 'eth_requestAccounts'\n    })\n    return accounts[0]\n  }\n\n  public deactivate() {\n    this.provider.removeListener('chainChanged', this.handleChainChanged)\n    this.provider.removeListener('accountsChanged', this.handleAccountsChanged)\n  }\n\n  public async close() {\n    this.provider.close()\n    this.emitDeactivate()\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId: chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n}\n"],"sourceRoot":""}