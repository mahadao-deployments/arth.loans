{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","emitDeactivate","Deactivate","EventEmitter","chainIdToNetwork","FortmaticConnector","apiKey","chainId","Object","keys","includes","toString","activate","fortmatic","getProvider","enable","then","accounts","account","provider","this","m","Fortmatic","undefined","e","getChainId","getAccount","send","deactivate","close","user","logout"],"mappings":"oLAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBC,oBAAWC,G,KAIdC,KAAKC,IAAeC,OAAQH,E,IAGzBI,mBAAUC,G,KAIbJ,KAAKC,IAAeI,MAAOD,E,IAGxBE,0B,KAIHN,KAAKC,IAAeM,W,IAhC7B,CAAgDC,e,oHAChD,IAAMC,EAAkD,CACtD,EAAG,UACH,EAAG,UACH,EAAG,UACH,GAAI,SAQOC,EAAb,Y,QAME,c,MAAcC,WAAQC,Y,OACVC,OAAOC,KAAKL,GAAkBM,SAASH,EAAQI,aAAzD,aAAU,IACV,cAAM,CAAEnB,kBAAmB,CAACe,MAA5B,MAEKD,OAASA,EACd,EAAKC,QAAUA,E,CAChB,C,EAZH,G,EAAA,G,6EAAA,2BAceK,SAdf,e,wCAuB0B,EAAKC,UACxBC,cACAC,SACAC,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,KAHc,eAAhBC,GAKN,MAAO,CAAEC,SAAU,EAAKN,UAAUC,cAAeP,QAAS,EAAKA,QAASW,U,OAbnEE,K,iBAAA,EAAKP,U,uBACgB,qCAAoBG,MAAK,SAAAK,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,CAAlB,KAA1B,eAAlBC,GACN,EAAKT,UAAY,IAAIS,EACnB,EAAKhB,OACY,IAAjB,EAAKC,SAAkC,IAAjB,EAAKA,aAAgBgB,EAAYnB,EAAiB,EAAKG,S,sDAnBrF,OAAAiB,GAAA,sBAAAA,EAAA,KA+BeV,YA/Bf,eAgCI,OAAO,QAAP,QAAOM,KAAKP,UAAUC,cAhC1B,OAAAU,GAAA,sBAAAA,EAAA,KAmCeC,WAnCf,eAoCI,OAAO,QAAP,QAAOL,KAAKb,QApChB,OAAAiB,GAAA,sBAAAA,EAAA,KAuCeE,WAvCf,eAwCI,OAAO,QAAP,QAAON,KAAKP,UACTC,cACAa,KAAK,gBACLX,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,IA3CZ,OAAAO,GAAA,sBAAAA,EAAA,KA8CSI,wBA9CT,EAgDeC,MAhDf,e,MAiDUT,K,uBAAA,EAAKP,UAAUiB,KAAKC,UAApB,iBACN,EAAK9B,gB,GAlDT,OAAAuB,GAAA,sBAAAA,EAAA,MAAwCjC,I","file":"static/js/16.a97647b2.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  42: 'kovan'\n}\n\ninterface FortmaticConnectorArguments {\n  apiKey: string\n  chainId: number\n}\n\nexport class FortmaticConnector extends AbstractConnector {\n  private readonly apiKey: string\n  private readonly chainId: number\n\n  public fortmatic: any\n\n  constructor({ apiKey, chainId }: FortmaticConnectorArguments) {\n    invariant(Object.keys(chainIdToNetwork).includes(chainId.toString()), `Unsupported chainId ${chainId}`)\n    super({ supportedChainIds: [chainId] })\n\n    this.apiKey = apiKey\n    this.chainId = chainId\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.fortmatic) {\n      const Fortmatic = await import('fortmatic').then(m => m?.default ?? m)\n      this.fortmatic = new Fortmatic(\n        this.apiKey,\n        this.chainId === 1 || this.chainId === 4 ? undefined : chainIdToNetwork[this.chainId]\n      )\n    }\n\n    const account = await this.fortmatic\n      .getProvider()\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.fortmatic.getProvider(), chainId: this.chainId, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.fortmatic.getProvider()\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.fortmatic\n      .getProvider()\n      .send('eth_accounts')\n      .then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {}\n\n  public async close() {\n    await this.fortmatic.user.logout()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}