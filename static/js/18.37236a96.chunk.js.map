{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","emitDeactivate","Deactivate","EventEmitter","chainIdToNetwork","PortisConnector","dAppId","networks","config","chainIds","map","n","Number","chainId","every","c","handleOnLogout","bind","handleOnActiveWalletChanged","handleOnError","this","account","activate","portis","onLogout","onActiveWalletChanged","onError","provider","enable","then","accounts","m","Portis","e","getProvider","getChainId","send","getAccount","deactivate","changeNetwork","newNetwork","isGasRelayEnabled","close","logout"],"mappings":"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","file":"static/js/18.37236a96.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport invariant from 'tiny-invariant'\n\nconst chainIdToNetwork: { [network: number]: string } = {\n  1: 'mainnet',\n  3: 'ropsten',\n  4: 'rinkeby',\n  5: 'goerli',\n  42: 'kovan',\n  100: 'xdai',\n  30: 'orchid',\n  31: 'orchidTestnet',\n  99: 'core',\n  77: 'sokol',\n  61: 'classic',\n  8: 'ubiq',\n  108: 'thundercore',\n  18: 'thundercoreTestnet',\n  163: 'lightstreams',\n  122: 'fuse',\n  15001: 'maticTestnet'\n}\n\ntype Network = number | { chainId: string; [key: string]: any }\n\ninterface PortisConnectorArguments {\n  dAppId: string\n  networks: Network[]\n  config?: any\n}\n\nexport class PortisConnector extends AbstractConnector {\n  private readonly dAppId: string\n  private readonly networks: Network[]\n  private readonly config: any\n\n  public portis: any\n\n  constructor({ dAppId, networks, config = {} }: PortisConnectorArguments) {\n    const chainIds = networks.map((n): number => (typeof n === 'number' ? n : Number(n.chainId)))\n    invariant(\n      chainIds.every((c): boolean => !!chainIdToNetwork[c]),\n      `One or more unsupported networks ${networks}`\n    )\n    super({ supportedChainIds: chainIds })\n\n    this.dAppId = dAppId\n    this.networks = networks\n    this.config = config\n\n    this.handleOnLogout = this.handleOnLogout.bind(this)\n    this.handleOnActiveWalletChanged = this.handleOnActiveWalletChanged.bind(this)\n    this.handleOnError = this.handleOnError.bind(this)\n  }\n\n  private handleOnLogout(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onLogout' event\")\n    }\n    this.emitDeactivate()\n  }\n\n  private handleOnActiveWalletChanged(account: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onActiveWalletChanged' event with payload\", account)\n    }\n    this.emitUpdate({ account })\n  }\n\n  private handleOnError(error: Error): void {\n    if (__DEV__) {\n      console.log(\"Handling 'onError' event\")\n    }\n    this.emitError(error)\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.portis) {\n      const Portis = await import('@portis/web3').then(m => m?.default ?? m)\n      this.portis = new Portis(\n        this.dAppId,\n        typeof this.networks[0] === 'number' ? chainIdToNetwork[this.networks[0]] : (this.networks[0] as any),\n        this.config\n      )\n    }\n\n    this.portis.onLogout(this.handleOnLogout)\n    this.portis.onActiveWalletChanged(this.handleOnActiveWalletChanged)\n    this.portis.onError(this.handleOnError)\n\n    const account = await this.portis.provider.enable().then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.portis.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.portis.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.portis.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.portis.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.portis.onLogout(() => {})\n    this.portis.onActiveWalletChanged(() => {})\n    this.portis.onError(() => {})\n  }\n\n  public async changeNetwork(newNetwork: number | Network, isGasRelayEnabled?: boolean) {\n    if (typeof newNetwork === 'number') {\n      invariant(!!chainIdToNetwork[newNetwork], `Invalid chainId ${newNetwork}`)\n      this.portis.changeNetwork(chainIdToNetwork[newNetwork], isGasRelayEnabled)\n      this.emitUpdate({ chainId: newNetwork })\n    } else {\n      this.portis.changeNetwork(newNetwork, isGasRelayEnabled)\n      this.emitUpdate({ chainId: Number(newNetwork.chainId) })\n    }\n  }\n\n  public async close() {\n    await this.portis.logout()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}