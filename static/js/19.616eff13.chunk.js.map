{"version":3,"sources":["../../src/index.ts"],"names":["AbstractConnector","supportedChainIds","emitUpdate","update","emit","ConnectorEvent","Update","emitError","error","Error","emitDeactivate","Deactivate","EventEmitter","TorusConnector","chainId","initOptions","constructorOptions","loginOptions","activate","torus","login","then","accounts","account","provider","this","m","Torus","init","e","getProvider","getChainId","getAccount","ethereum","send","deactivate","close","cleanUp"],"mappings":"oLAGsBA,EAAtB,Y,4BAGgBC,Q,MAAkD,MAAlDA,kB,6BAEPA,kBAAoBA,E,oHASjBC,oBAAWC,G,KAIdC,KAAKC,IAAeC,OAAQH,E,IAGzBI,mBAAUC,G,KAIbJ,KAAKC,IAAeI,MAAOD,E,IAGxBE,0B,KAIHN,KAAKC,IAAeM,W,IAhC7B,CAAgDC,e,8FAOnCC,EAAb,Y,QAQE,c,MAAcC,Y,IAASC,uBAAcA,EAAA,CAAC,EAAD,E,IAAIC,8BAAqBA,EAAA,CAAC,EAAD,E,IAAIC,wBAAeA,EAAA,CAAC,EAAD,E,OAC/E,cAAM,CAAEhB,kBAAmB,CAACa,MAA5B,MAEKA,QAAUA,EACf,EAAKC,YAAcA,EACnB,EAAKC,mBAAqBA,EAC1B,EAAKC,aAAeA,E,CACrB,C,EAfH,G,EAAA,G,6EAAA,2BAiBeC,SAjBf,e,wCAwB0B,EAAKC,MAAMC,MAAM,EAAKH,cAAcI,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,KAAzC,eAAhBC,GAEN,MAAO,CAAEC,SAAU,EAAKL,MAAMK,SAAUD,U,OARnCE,K,iBAAA,EAAKN,M,uBACY,oCAAiCE,MAAK,SAAAK,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,EAAkBA,CAAlB,KAAvC,eAAdC,G,OACN,EAAKR,MAAQ,IAAIQ,EAAM,EAAKX,oB,gBACtB,EAAKG,MAAMS,KAAK,EAAKb,cAArB,oB,sDArBZ,OAAAc,GAAA,sBAAAA,EAAA,KA6BeC,YA7Bf,eA8BI,OAAO,QAAP,QAAOL,KAAKN,MAAMK,SA9BtB,OAAAK,GAAA,sBAAAA,EAAA,KAiCeE,WAjCf,eAkCI,OAAO,QAAP,QAAON,KAAKX,QAlChB,OAAAe,GAAA,sBAAAA,EAAA,KAqCeG,WArCf,eAsCI,OAAO,QAAP,QAAOP,KAAKN,MAAMc,SAASC,KAAK,gBAAgBb,MAAK,SAACC,GAAD,OAAgCA,EAAS,EAAzC,IAtCzD,OAAAO,GAAA,sBAAAA,EAAA,KAyCeM,WAzCf,W,wBAyC8B,EAzC9B,EA2CeC,MA3Cf,e,MA4CUX,K,uBAAA,EAAKN,MAAMkB,WAAX,iBACN,EAAK3B,gB,GA7CT,OAAAmB,GAAA,sBAAAA,EAAA,M,QAAoC7B,E","file":"static/js/19.616eff13.chunk.js","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\n\ninterface TorusConnectorArguments {\n  chainId: number\n  initOptions?: any\n  constructorOptions?: any\n  loginOptions?: any\n}\n\nexport class TorusConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly initOptions: any\n  private readonly constructorOptions: any\n  private readonly loginOptions: any\n\n  public torus: any\n\n  constructor({ chainId, initOptions = {}, constructorOptions = {}, loginOptions = {} }: TorusConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.initOptions = initOptions\n    this.constructorOptions = constructorOptions\n    this.loginOptions = loginOptions\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.torus) {\n      const Torus = await import('@toruslabs/torus-embed').then(m => m?.default ?? m)\n      this.torus = new Torus(this.constructorOptions)\n      await this.torus.init(this.initOptions)\n    }\n\n    const account = await this.torus.login(this.loginOptions).then((accounts: string[]): string => accounts[0])\n\n    return { provider: this.torus.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.torus.provider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return this.torus.ethereum.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public async deactivate() {}\n\n  public async close() {\n    await this.torus.cleanUp()\n    this.emitDeactivate()\n  }\n}\n"],"sourceRoot":""}